---
import type { CollectionEntry } from "astro:content";
import Pagination from "@/components/Paginator.astro";
import PostPreview from "@/components/blog/PostPreview.astro";
import ProjectPreview from "@/components/blog/ProjectPreview.astro";
import { getAllPosts, getUniqueTags as getUniqueTagsPost } from "@/data/post";
import { getAllProjects, getUniqueTags as getUniqueTagsProject } from "@/data/project";
import PageLayout from "@/layouts/Base.astro";
import { collectionDateSort } from "@/utils/date";
import type { GetStaticPaths, Page } from "astro";

// Create a union type for both posts and projects with type information
type ContentWithType = (CollectionEntry<"post"> | CollectionEntry<"project">) & {
	contentType: "post" | "project";
};

export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
	const allPosts = await getAllPosts();
	const sortedPosts = allPosts.sort(collectionDateSort);

	const allProjects = await getAllProjects();
	const sortedProjects = allProjects.sort(collectionDateSort);

	const uniqueTagsPost = getUniqueTagsPost(sortedPosts).map((tag) => ({
		tag,
		type: "post",
	}));
	const uniqueTagsProject = getUniqueTagsProject(sortedProjects).map((tag) => ({
		tag,
		type: "project",
	}));

	const uniqueTags = [...uniqueTagsPost, ...uniqueTagsProject];

	return uniqueTags.flatMap((tag) => {
		const filterPosts = sortedPosts.filter((post) => post.data.tags.includes(tag.tag));
		const filterProjects = sortedProjects.filter((project) => project.data.tags.includes(tag.tag));

		// Add type information to distinguish between posts and projects
		const postsWithType: ContentWithType[] = filterPosts.map((post) => ({
			...post,
			contentType: "post" as const,
		}));

		const projectsWithType: ContentWithType[] = filterProjects.map((project) => ({
			...project,
			contentType: "project" as const,
		}));

		const allContent = [...postsWithType, ...projectsWithType];

		return paginate(allContent, {
			pageSize: 10,
			params: { tag: tag.tag, type: tag.type },
		});
	});
};

interface Props {
	page: Page<ContentWithType>;
}

const { page } = Astro.props;
const { tag } = Astro.params;

const meta = {
	description: `Voir tous les articles avec le tag - ${tag}`,
	title: `Tag: ${tag}`,
};

const paginationProps = {
	...(page.url.prev && {
		prevUrl: {
			text: "← Previous Tags",
			url: page.url.prev,
		},
	}),
	...(page.url.next && {
		nextUrl: {
			text: "Next Tags →",
			url: page.url.next,
		},
	}),
};
---

<PageLayout meta={meta}>
	<div class="mb-6 flex items-center">
		<h1 class="sr-only">Posts with the tag {tag}</h1>
		<a class="title text-accent" href="/tags/"><span class="sr-only">All {" "}</span>Tags</a>
		<span aria-hidden="true" class="ms-2 me-3 text-xl">→</span>
		<span aria-hidden="true" class="text-xl">#{tag}</span>
	</div>
	<section aria-labelledby={`tags-${tag}`} class="space-y-6">
		<ul class="space-y-6">
			{
				page.data
					.filter((p) => p.contentType === "post")
					.map((p) => (
						<li class="grid gap-2 sm:grid-cols-[auto_1fr]">
							<PostPreview as="h2" post={p as CollectionEntry<"post">} />
						</li>
					))
			}
		</ul>

		<ul class="space-y-6">
			{
				page.data
					.filter((p) => p.contentType === "project")
					.map((p) => (
						<li class="grid gap-2 sm:grid-cols-[auto_1fr]">
							<ProjectPreview project={p as CollectionEntry<"project">} />
						</li>
					))
			}
		</ul>
		<Pagination {...paginationProps} />
	</section>
</PageLayout>
